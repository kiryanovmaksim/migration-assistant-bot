from __future__ import annotations

import asyncio

from sqlalchemy.ext.asyncio import AsyncSession
from telegram import Update
from telegram.ext import (
    Application,
    CommandHandler,
    ContextTypes,
    MessageHandler,
    filters,
)

from .config import settings
from .db import SessionLocal
from . import repo
from .utils import parse_meeting_form, require_login, require_role


# ---------------------------- auth -----------------------------

async def login_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if len(context.args) < 2:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /login <username> <password>")
        return

    username, password = context.args[0], context.args[1]

    async with SessionLocal() as db:
        user = await repo.authenticate_user(db, username, password)
        if not user:
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å")
            return

        await repo.set_active_session(db, update.effective_user.id, user.id)
        await update.message.reply_text(f"‚úÖ –£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥. –í–∞—à–∞ —Ä–æ–ª—å: {user.role.name}")


@require_login
async def logout_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    async with SessionLocal() as db:
        await repo.logout(db, update.effective_user.id)
    await update.message.reply_text("‚ÑπÔ∏è –í—ã –≤—ã—à–ª–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã")


@require_login
async def whoami_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    async with SessionLocal() as db:
        user = await repo.get_active_user(db, update.effective_user.id)
        if user:
            await update.message.reply_text(f"üë§ –í—ã –≤–æ—à–ª–∏ –∫–∞–∫ {user.username}, —Ä–æ–ª—å: {user.role.name}")
        else:
            await update.message.reply_text("‚ö†Ô∏è –í—ã –Ω–µ –≤–æ—à–ª–∏ –≤ —Å–∏—Å—Ç–µ–º—É")


# ---------------------------- user commands -----------------------------

@require_login
async def start_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await update.message.reply_text("üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /login –¥–ª—è –≤—Ö–æ–¥–∞.")


@require_login
async def my_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    async with SessionLocal() as db:
        user = await repo.get_active_user(db, update.effective_user.id)
        if user:
            await update.message.reply_text(f"üë§ {user.username}, —Ä–æ–ª—å: {user.role.name}")
        else:
            await update.message.reply_text("‚ö†Ô∏è –í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã.")


# ---------------------------- meetings -----------------------------

@require_login
async def meetings_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    async with SessionLocal() as db:
        meetings = await repo.list_meetings(db)
        if not meetings:
            await update.message.reply_text("–í—Å—Ç—Ä–µ—á –Ω–µ—Ç.")
            return
        text = "\n".join(f"{m.id}: {m.title} [{m.status}]" for m in meetings)
        await update.message.reply_text(f"üìÖ –í—Å—Ç—Ä–µ—á–∏:\n{text}")


@require_role("–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä")
async def newmeeting_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –≤—Å—Ç—Ä–µ—á–∏.
    –§–æ—Ä–º–∞—Ç: /newmeeting Title | Desc | Dept | Country | Deadline
    –ü—Ä–∏–º–µ—Ä:
        /newmeeting –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–ª–∏–∑–∞ | –û–±—Å—É–∂–¥–µ–Ω–∏–µ –∑–∞–¥–∞—á | –†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ | –†–æ—Å—Å–∏—è | 2025-11-05
    """
    text = " ".join(context.args)
    if not text:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /newmeeting Title | Desc | Dept | Country | Deadline")
        return

    try:
        title, description, department, country, deadline_at = parse_meeting_form(text)
    except ValueError as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return

    async with SessionLocal() as db:
        # –ø–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = await repo.get_active_user(db, update.effective_user.id)
        if not user:
            await update.message.reply_text("‚ö†Ô∏è –í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã.")
            return

        # —Å–æ–∑–¥–∞—ë–º –≤—Å—Ç—Ä–µ—á—É —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –∞–≤—Ç–æ—Ä–∞
        meeting = await repo.create_meeting(
            db=db,
            title=title,
            description=description,
            department=department,
            country=country,
            deadline_at=deadline_at,
            created_by=user.id  # ‚Üê –¥–æ–±–∞–≤–ª–µ–Ω–æ
        )

        await update.message.reply_text(f"‚úÖ –í—Å—Ç—Ä–µ—á–∞ '{meeting.title}' —Å–æ–∑–¥–∞–Ω–∞ (id={meeting.id})")


@require_role("–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä")
async def addquestion_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if len(context.args) < 2:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /addquestion <meeting_id> <—Ç–µ–∫—Å—Ç>")
        return
    meeting_id = int(context.args[0])
    text = " ".join(context.args[1:])
    async with SessionLocal() as db:
        q = await repo.add_question(db, meeting_id, text)
        if q:
            await update.message.reply_text(f"‚ûï –í–æ–ø—Ä–æ—Å –¥–æ–±–∞–≤–ª–µ–Ω (id={q.id})")
        else:
            await update.message.reply_text("‚ùå –í—Å—Ç—Ä–µ—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")


@require_role("–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä")
async def openmeeting_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if not context.args:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /openmeeting <id>")
        return
    meeting_id = int(context.args[0])
    async with SessionLocal() as db:
        ok = await repo.set_meeting_status(db, meeting_id, "open")
        await update.message.reply_text("‚úÖ –û—Ç–∫—Ä—ã—Ç–∞" if ok else "‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–∞")


@require_role("–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä")
async def closemeeting_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if not context.args:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /closemeeting <id>")
        return
    meeting_id = int(context.args[0])
    async with SessionLocal() as db:
        ok = await repo.set_meeting_status(db, meeting_id, "closed")
        await update.message.reply_text("‚úÖ –ó–∞–∫—Ä—ã—Ç–∞" if ok else "‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–∞")


@require_role("–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä")
async def delmeeting_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if not context.args:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /delmeeting <id>")
        return
    meeting_id = int(context.args[0])
    async with SessionLocal() as db:
        ok = await repo.delete_meeting(db, meeting_id)
        await update.message.reply_text("üóë –£–¥–∞–ª–µ–Ω–∞" if ok else "‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–∞")


@require_role("–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä")
async def exportmeeting_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if not context.args:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /exportmeeting <id>")
        return
    meeting_id = int(context.args[0])
    async with SessionLocal() as db:
        # –∑–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤ CSV
        await update.message.reply_text(f"üì§ –≠–∫—Å–ø–æ—Ä—Ç –≤—Å—Ç—Ä–µ—á–∏ {meeting_id} (–∑–∞–≥–ª—É—à–∫–∞)")


# ---------------------------- roles -----------------------------
# (–æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –±—ã–ª–æ –≤ —ç—Ç–∞–ø–µ 5)

# ---------------------------- misc -----------------------------

async def text_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help.")

# –∫–æ–º–∞–Ω–¥—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–æ–ª—è–º–∏
async def roles_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    async with SessionLocal() as db:
        roles = await repo.list_roles(db)
        text = "üìã –†–æ–ª–∏:\n" + "\n".join(f"{r.id}. {r.name}" for r in roles)
        await update.message.reply_text(text)


@require_role("–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä")
async def addrole_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.args:
        await update.message.reply_text("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /addrole <–Ω–∞–∑–≤–∞–Ω–∏–µ>")
        return
    async with SessionLocal() as db:
        r = await repo.create_role(db, context.args[0])
        await update.message.reply_text(f"‚úÖ –†–æ–ª—å —Å–æ–∑–¥–∞–Ω–∞: {r.name} (id={r.id})")


@require_role("–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä")
async def renamerole_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if len(context.args) < 2:
        await update.message.reply_text("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /renamerole <id> <–Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ>")
        return
    role_id = int(context.args[0])
    new_name = context.args[1]
    async with SessionLocal() as db:
        ok = await repo.rename_role(db, role_id, new_name)
        await update.message.reply_text("‚úÖ –†–æ–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω–∞" if ok else "‚ùå –†–æ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")


@require_role("–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä")
async def delrole_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.args:
        await update.message.reply_text("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /delrole <id>")
        return
    role_id = int(context.args[0])
    async with SessionLocal() as db:
        ok = await repo.delete_role(db, role_id)
        await update.message.reply_text("‚úÖ –†–æ–ª—å —É–¥–∞–ª–µ–Ω–∞" if ok else "‚ùå –†–æ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")


@require_role("–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä")
async def setrole_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if len(context.args) < 2:
        await update.message.reply_text("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /setrole <username> <role_id>")
        return
    username = context.args[0]
    role_id = int(context.args[1])
    async with SessionLocal() as db:
        u = await repo.get_user_by_username(db, username)
        if not u:
            await update.message.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        u.role_id = role_id
        await db.commit()
        await update.message.reply_text(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} —Ç–µ–ø–µ—Ä—å –∏–º–µ–µ—Ç —Ä–æ–ª—å {role_id}")


from telegram import ReplyKeyboardMarkup
# –æ—Å—Ç–∞–ª—å–Ω–æ–µ —É —Ç–µ–±—è —É–∂–µ –µ—Å—Ç—å

# ---------------------------- menu -----------------------------

COMMANDS_BY_ROLE = {
    "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä": [
        "/roles", "/addrole", "/renamerole", "/delrole", "/setrole",
        "/meetings", "/newmeeting", "/addquestion", "/openmeeting", "/closemeeting",
        "/delmeeting", "/exportmeeting",
        "/questions", "/answer",
        "/whoami", "/logout",
    ],
    "–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä": [
        "/meetings", "/newmeeting", "/addquestion", "/openmeeting", "/closemeeting",
        "/questions", "/answer",
        "/whoami", "/logout",
    ],
    "–£—á–∞—Å—Ç–Ω–∏–∫": [
        "/meetings", "/questions", "/answer", "/whoami", "/logout",
    ],
}



@require_login
async def menu_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    async with SessionLocal() as db:
        user = await repo.get_active_user(db, update.effective_user.id)
        if not user:
            await update.message.reply_text("‚ö†Ô∏è –í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã")
            return

        role = user.role.name
        commands = COMMANDS_BY_ROLE.get(role, ["/meetings", "/logout"])
        # –¥–µ–ª–∏–º —Å–ø–∏—Å–æ–∫ –Ω–∞ —Å—Ç—Ä–æ–∫–∏ –ø–æ 2 –∫–Ω–æ–ø–∫–∏
        keyboard = [[cmd for cmd in commands[i:i + 2]] for i in range(0, len(commands), 2)]

        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        await update.message.reply_text(
            f"üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —Ä–æ–ª–∏ *{role}*:",
            reply_markup=reply_markup,
            parse_mode="Markdown"
        )

# –ø–æ–∫–∞–∑–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã –≤—Å—Ç—Ä–µ—á–∏
@require_login
async def questions_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE, db: AsyncSession, user: User):
    if not context.args:
        await update.message.reply_text("‚ùå –£–∫–∞–∂–∏—Ç–µ ID –≤—Å—Ç—Ä–µ—á–∏: /questions <meeting_id>")
        return
    meeting_id = int(context.args[0])
    questions = await repo.list_questions(db, meeting_id)
    if not questions:
        await update.message.reply_text("–ù–µ—Ç –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è —ç—Ç–æ–π –≤—Å—Ç—Ä–µ—á–∏.")
    else:
        text = "\n".join([f"{q.id}. {q.text}" for q in questions])
        await update.message.reply_text(f"–í–æ–ø—Ä–æ—Å—ã –≤—Å—Ç—Ä–µ—á–∏ {meeting_id}:\n{text}")

# –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å
@require_login
async def answer_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–î–æ–±–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å."""
    if len(context.args) < 2:
        await update.message.reply_text("‚ùå –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /answer <question_id> <—Ç–µ–∫—Å—Ç>")
        return

    try:
        qid = int(context.args[0])
    except ValueError:
        await update.message.reply_text("‚ùå ID –≤–æ–ø—Ä–æ—Å–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
        return

    text = " ".join(context.args[1:])

    async with SessionLocal() as db:
        # –ø–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = await repo.get_active_user(db, update.effective_user.id)
        if not user:
            await update.message.reply_text("‚ö†Ô∏è –í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã.")
            return

        # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç
        answer = await repo.add_answer(db, user.id, qid, text)
        if not answer:
            await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ç–≤–µ—Ç.")
        else:
            await update.message.reply_text("‚úÖ –û—Ç–≤–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω —É—Å–ø–µ—à–Ω–æ.")


# ---------------------------- help -----------------------------

async def help_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    text = (
        "ü§ñ *TeamMeet Bot* ‚Äî –±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥–Ω—ã–º–∏ –≤—Å—Ç—Ä–µ—á–∞–º–∏.\n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "üîë –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è:\n"
        "  /login <username> <password> ‚Äî –≤—Ö–æ–¥\n"
        "  /logout ‚Äî –≤—ã—Ö–æ–¥\n"
        "  /whoami ‚Äî –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ–∫—É—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ\n\n"
        "üìÖ –í—Å—Ç—Ä–µ—á–∏:\n"
        "  /meetings ‚Äî —Å–ø–∏—Å–æ–∫ –≤—Å—Ç—Ä–µ—á\n"
        "  /newmeeting <–¥–∞–Ω–Ω—ã–µ> ‚Äî —Å–æ–∑–¥–∞—Ç—å –≤—Å—Ç—Ä–µ—á—É (–º–æ–¥–µ—Ä–∞—Ç–æ—Ä)\n"
        "  /addquestion <meeting_id> <—Ç–µ–∫—Å—Ç> ‚Äî –¥–æ–±–∞–≤–∏—Ç—å –≤–æ–ø—Ä–æ—Å (–º–æ–¥–µ—Ä–∞—Ç–æ—Ä)\n"
        "  /openmeeting <id> ‚Äî –æ—Ç–∫—Ä—ã—Ç—å –≤—Å—Ç—Ä–µ—á—É (–º–æ–¥–µ—Ä–∞—Ç–æ—Ä)\n"
        "  /closemeeting <id> ‚Äî –∑–∞–∫—Ä—ã—Ç—å –≤—Å—Ç—Ä–µ—á—É (–º–æ–¥–µ—Ä–∞—Ç–æ—Ä)\n"
        "  /delmeeting <id> ‚Äî —É–¥–∞–ª–∏—Ç—å –≤—Å—Ç—Ä–µ—á—É (–∞–¥–º–∏–Ω)\n"
        "  /exportmeeting <id> ‚Äî —ç–∫—Å–ø–æ—Ä—Ç –≤—Å—Ç—Ä–µ—á–∏ (–∞–¥–º–∏–Ω)\n\n"
        "‚ùì –í–æ–ø—Ä–æ—Å—ã:\n"
        "  /questions <meeting_id> ‚Äî —Å–ø–∏—Å–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤\n"
        "  /answer <question_id> <—Ç–µ–∫—Å—Ç> ‚Äî –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å\n\n"
        "üë• –†–æ–ª–∏:\n"
        "  /roles ‚Äî —Å–ø–∏—Å–æ–∫ —Ä–æ–ª–µ–π\n"
        "  /addrole <–Ω–∞–∑–≤–∞–Ω–∏–µ> ‚Äî –¥–æ–±–∞–≤–∏—Ç—å —Ä–æ–ª—å (–∞–¥–º–∏–Ω)\n"
        "  /renamerole <id> <–Ω–∞–∑–≤–∞–Ω–∏–µ> ‚Äî –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å —Ä–æ–ª—å (–∞–¥–º–∏–Ω)\n"
        "  /delrole <id> ‚Äî —É–¥–∞–ª–∏—Ç—å —Ä–æ–ª—å (–∞–¥–º–∏–Ω)\n"
        "  /setrole <username> <role_id> ‚Äî –Ω–∞–∑–Ω–∞—á–∏—Ç—å —Ä–æ–ª—å (–∞–¥–º–∏–Ω)\n\n"
        "üìã –î—Ä—É–≥–æ–µ:\n"
        "  /menu ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é\n"
        "  /help ‚Äî –ø–æ–º–æ—â—å\n\n"
        "–ê–≤—Ç–æ—Ä: –ö–∏—Ä—å—è–Ω–æ–≤ –ú–∞–∫—Å–∏–º"
    )
    await update.message.reply_text(text, parse_mode="Markdown")

# ---------------------------- exportjson -----------------------------

import json
import os
from io import BytesIO
from telegram import InputFile
from sqlalchemy import select


@require_login
async def exportjson_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE, db: AsyncSession, user: User):
    """
    –≠–∫—Å–ø–æ—Ä—Ç –≤—Å–µ—Ö –≤—Å—Ç—Ä–µ—á, –≤–æ–ø—Ä–æ—Å–æ–≤ –∏ –æ—Ç–≤–µ—Ç–æ–≤ –≤ JSON.
    –î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.
    """
    from .models import Meeting, Question, Answer, Response

    meetings_data = []

    meetings = (await db.execute(select(Meeting))).scalars().all()
    for m in meetings:
        meeting_dict = {
            "id": m.id,
            "title": m.title,
            "description": m.description,
            "department": m.department,
            "country": m.country,
            "status": m.status.value if hasattr(m.status, "value") else m.status,
            "created_at": str(m.created_at),
            "questions": [],
        }

        questions = (await db.execute(select(Question).where(Question.meeting_id == m.id))).scalars().all()
        for q in questions:
            q_dict = {
                "id": q.id,
                "text": q.text,
                "order_idx": q.order_idx,
                "is_required": getattr(q, "is_required", None),
                "answers": [],
            }

            # –∏—â–µ–º –≤—Å–µ –æ—Ç–≤–µ—Ç—ã —á–µ—Ä–µ–∑ response + user_id
            answers = (await db.execute(select(Answer).where(Answer.question_id == q.id))).scalars().all()
            for a in answers:
                response = (await db.execute(select(Response).where(Response.id == a.response_id))).scalar_one_or_none()
                user_id = response.user_id if response else None
                submitted_at = response.submitted_at if response else None

                q_dict["answers"].append({
                    "user_id": user_id,
                    "value": a.value,
                    "submitted_at": str(submitted_at) if submitted_at else None,
                })

            meeting_dict["questions"].append(q_dict)

        meetings_data.append(meeting_dict)

    # —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è
    json_data = json.dumps(meetings_data, indent=4, ensure_ascii=False)
    json_bytes = BytesIO(json_data.encode('utf-8'))
    json_bytes.name = "meetings_export.json"

    await update.message.reply_document(
        document=InputFile(json_bytes, filename="meetings_export.json"),
        caption="üì¶ –≠–∫—Å–ø–æ—Ä—Ç –≤—Å–µ—Ö –≤—Å—Ç—Ä–µ—á –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ."
    )


# ---------------------------- init -----------------------------

async def _on_startup(app: Application) -> None:
    from .db import init_db
    await init_db()


def build_app() -> Application:
    app = Application.builder().token(settings.BOT_TOKEN).build()

    # auth
    app.add_handler(CommandHandler("login", login_cmd))
    app.add_handler(CommandHandler("logout", logout_cmd))
    app.add_handler(CommandHandler("whoami", whoami_cmd))

    # user
    app.add_handler(CommandHandler("start", start_cmd))
    app.add_handler(CommandHandler("my", my_cmd))

    # meetings
    app.add_handler(CommandHandler("meetings", meetings_cmd))
    app.add_handler(CommandHandler("newmeeting", newmeeting_cmd))
    app.add_handler(CommandHandler("addquestion", addquestion_cmd))
    app.add_handler(CommandHandler("openmeeting", openmeeting_cmd))
    app.add_handler(CommandHandler("closemeeting", closemeeting_cmd))
    app.add_handler(CommandHandler("delmeeting", delmeeting_cmd))
    app.add_handler(CommandHandler("exportmeeting", exportmeeting_cmd))

    # roles (–∏–∑ —ç—Ç–∞–ø–∞ 5)
    app.add_handler(CommandHandler("roles", roles_cmd))
    app.add_handler(CommandHandler("addrole", addrole_cmd))
    app.add_handler(CommandHandler("renamerole", renamerole_cmd))
    app.add_handler(CommandHandler("delrole", delrole_cmd))
    app.add_handler(CommandHandler("setrole", setrole_cmd))

    app.add_handler(CommandHandler("questions", questions_cmd))
    app.add_handler(CommandHandler("answer", answer_cmd))

    # misc
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, text_handler))
    # misc
    app.add_handler(CommandHandler("help", help_cmd))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, text_handler))

    # menu
    app.add_handler(CommandHandler("menu", menu_cmd))
    app.add_handler(CommandHandler("exportjson", exportjson_cmd))

    app.post_init = _on_startup
    return app


async def run() -> None:
    app = build_app()

    await app.run_polling()


if __name__ == "__main__":
    asyncio.run(run())
