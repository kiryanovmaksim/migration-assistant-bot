# run.py
import sys
from sqlalchemy import delete

from app.bot import build_app
from app.config import settings
from app.db import init_db, SessionLocal
from app import repo
from app.models import MeetingStatus, Answer, Response, Option, Question, Meeting

# –í–ö–õ/–í–´–ö–õ –æ—á–∏—Å—Ç–∫—É –∏ –∞–≤—Ç–æ–∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –ë–î
CLEAR_AND_SEED_DB = True


async def seed_db(clear: bool = True) -> None:
    """–û—á–∏—Å—Ç–∏—Ç—å –ë–î –∏ –¥–æ–±–∞–≤–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ (2 –≤—Å—Ç—Ä–µ—á–∏ —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏)."""
    await init_db()
    async with SessionLocal() as db:
        if clear:
            # –ø–æ—Ä—è–¥–æ–∫ —É–¥–∞–ª–µ–Ω–∏—è –≤–∞–∂–µ–Ω (—Å–Ω–∏–∑—É –≤–≤–µ—Ä—Ö –ø–æ —Å–≤—è–∑—è–º)
            await db.execute(delete(Answer))
            await db.execute(delete(Response))
            await db.execute(delete(Option))
            await db.execute(delete(Question))
            await db.execute(delete(Meeting))
            await db.commit()

        # –°–æ–∑–¥–∞—ë–º/–Ω–∞—Ö–æ–¥–∏–º –∞–¥–º–∏–Ω–∞ (–ø–æ –ø–µ—Ä–≤–æ–º—É id –∏–∑ ADMIN_IDS, –∏–Ω–∞—á–µ —Ç–µ–ª–µ–≥—Ä–∞–º-id=1)
        admin_tid = settings.ADMIN_IDS[0] if settings.ADMIN_IDS else 1
        admin_user = await repo.get_or_create_user(db, telegram_id=admin_tid, fio="Admin User")

        # –í—Å—Ç—Ä–µ—á–∞ 1: –ü–ª–∞–Ω—ë—Ä–∫–∞
        m1 = await repo.create_meeting(
            db, created_by=admin_user.id,
            title="–ü–ª–∞–Ω—ë—Ä–∫–∞", description="–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–µ —Å–æ–≤–µ—â–∞–Ω–∏–µ",
            department="IT-–æ—Ç–¥–µ–ª", country="–†–æ—Å—Å–∏—è", deadline_at=None,
        )
        await repo.add_question(db, m1.id, "–ö–∞–∫–∏–µ –∑–∞–¥–∞—á–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã –Ω–∞ –Ω–µ–¥–µ–ª–µ?", "text", 0, True, None)
        await repo.add_question(db, m1.id, "–°–∫–æ–ª—å–∫–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –±—É–¥–µ—Ç?", "int", 1, True, None)
        await repo.add_question(db, m1.id, "–ù—É–∂–Ω–∞ –∑–∞–ø–∏—Å—å –≤—Å—Ç—Ä–µ—á–∏?", "bool", 2, False, None)
        await repo.add_question(db, m1.id, "–§–æ—Ä–º–∞—Ç –≤—Å—Ç—Ä–µ—á–∏?", "choice", 3, True, ["–û–Ω–ª–∞–π–Ω", "–û—Ñ–ª–∞–π–Ω"])
        await repo.set_meeting_status(db, m1.id, MeetingStatus.open)

        # –í—Å—Ç—Ä–µ—á–∞ 2: –†–µ—Ç—Ä–æ—Å–ø–µ–∫—Ç–∏–≤–∞
        m2 = await repo.create_meeting(
            db, created_by=admin_user.id,
            title="–†–µ—Ç—Ä–æ—Å–ø–µ–∫—Ç–∏–≤–∞", description="–ò—Ç–æ–≥–∏ —Å–ø—Ä–∏–Ω—Ç–∞ –∏ –ø–ª–∞–Ω —É–ª—É—á—à–µ–Ω–∏–π",
            department="IT-–æ—Ç–¥–µ–ª", country="–†–æ—Å—Å–∏—è", deadline_at=None,
        )
        await repo.add_question(db, m2.id, "–ß—Ç–æ –±—ã–ª–æ —Ö–æ—Ä–æ—à–æ?", "text", 0, True, None)
        await repo.add_question(db, m2.id, "–ß—Ç–æ —É–ª—É—á—à–∏—Ç—å?", "text", 1, True, None)
        await repo.add_question(db, m2.id, "–¢–µ–º—ã –¥–ª—è –æ–±—Å—É–∂–¥–µ–Ω–∏—è", "multi", 2, False,
                                ["–°—Ç–∞—Ç—É—Å—ã", "–†–∏—Å–∫–∏", "–ë–ª–æ–∫–µ—Ä—ã", "–î–µ–º–æ"])
        await repo.set_meeting_status(db, m2.id, MeetingStatus.open)


def main():
    import asyncio
    if sys.platform.startswith("win"):
        asyncio.set_event_loop_policy(asyncio.WindowsSelectorEventLoopPolicy())

    if CLEAR_AND_SEED_DB:
        asyncio.run(seed_db(clear=True))
        # –≤–∞–∂–Ω–∞—è —Å—Ç—Ä–æ–∫–∞: —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π —Ü–∏–∫–ª –¥–ª—è run_polling()
        asyncio.set_event_loop(asyncio.new_event_loop())

    app = build_app()
    print("ü§ñ Bot is running... Press Ctrl+C to stop.")
    app.run_polling()


if __name__ == "__main__":
    main()
